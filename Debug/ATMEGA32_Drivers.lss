
ATMEGA32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00002e24  00002e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000210c  00000000  00000000  00002fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b11  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000838a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b70c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6f 15 	call	0x2ade	; 0x2ade <main>
      7a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e9       	ldi	r26, 0x90	; 144
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e9       	ldi	r24, 0x90	; 144
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e9       	ldi	r22, 0x90	; 144
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 56       	subi	r30, 0x68	; 104
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_vidSetPinDirection>:
#include "DIO_Config.h"
#include "DIO_Interface.h"


void DIO_vidSetPinDirection	(u8 PortNum,u8 PinNum,u8 PinDir)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <DIO_vidSetPinDirection+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_vidSetPinDirection+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	6a 83       	std	Y+2, r22	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNum<=DIO_PORTD && PinNum<=DIO_PIN7)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	08 f0       	brcs	.+2      	; 0xe3a <DIO_vidSetPinDirection+0x1c>
     e38:	d5 c0       	rjmp	.+426    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	88 30       	cpi	r24, 0x08	; 8
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <DIO_vidSetPinDirection+0x24>
     e40:	d1 c0       	rjmp	.+418    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
	{
	switch(PortNum){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_vidSetPinDirection+0x3a>
     e56:	43 c0       	rjmp	.+134    	; 0xede <DIO_vidSetPinDirection+0xc0>
     e58:	2c 81       	ldd	r18, Y+4	; 0x04
     e5a:	3d 81       	ldd	r19, Y+5	; 0x05
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	2c f4       	brge	.+10     	; 0xe6c <DIO_vidSetPinDirection+0x4e>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	71 f0       	breq	.+28     	; 0xe86 <DIO_vidSetPinDirection+0x68>
     e6a:	bc c0       	rjmp	.+376    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_vidSetPinDirection+0x5a>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_vidSetPinDirection+0x118>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <DIO_vidSetPinDirection+0x66>
     e82:	85 c0       	rjmp	.+266    	; 0xf8e <DIO_vidSetPinDirection+0x170>
     e84:	af c0       	rjmp	.+350    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
	case DIO_PORTA:
		if(PinDir==DIO_PIN_INPUT){
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	88 23       	and	r24, r24
     e8a:	a9 f4       	brne	.+42     	; 0xeb6 <DIO_vidSetPinDirection+0x98>
			CLR_BIT(DDRA,PinNum);
     e8c:	aa e3       	ldi	r26, 0x3A	; 58
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ea e3       	ldi	r30, 0x3A	; 58
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_vidSetPinDirection+0x8c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_vidSetPinDirection+0x88>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	97 c0       	rjmp	.+302    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		else
		{
			SET_BIT(DDRA,PinNum);
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_vidSetPinDirection+0xb6>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_vidSetPinDirection+0xb2>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	83 c0       	rjmp	.+262    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		break;
	case DIO_PORTB:
		if(PinDir==DIO_PIN_INPUT){
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 23       	and	r24, r24
     ee2:	a9 f4       	brne	.+42     	; 0xf0e <DIO_vidSetPinDirection+0xf0>
			CLR_BIT(DDRB,PinNum);
     ee4:	a7 e3       	ldi	r26, 0x37	; 55
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e3       	ldi	r30, 0x37	; 55
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_vidSetPinDirection+0xe4>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_vidSetPinDirection+0xe0>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	6b c0       	rjmp	.+214    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		else
		{
			SET_BIT(DDRB,PinNum);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_vidSetPinDirection+0x10e>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_vidSetPinDirection+0x10a>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	57 c0       	rjmp	.+174    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		break;
	case DIO_PORTC:
		if(PinDir==DIO_PIN_INPUT){
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 23       	and	r24, r24
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_vidSetPinDirection+0x148>
			CLR_BIT(DDRC,PinNum);
     f3c:	a4 e3       	ldi	r26, 0x34	; 52
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e3       	ldi	r30, 0x34	; 52
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidSetPinDirection+0x13c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidSetPinDirection+0x138>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		else
		{
			SET_BIT(DDRC,PinNum);
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_vidSetPinDirection+0x166>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_vidSetPinDirection+0x162>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	2b c0       	rjmp	.+86     	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		break;

	case DIO_PORTD:
		if(PinDir==DIO_PIN_INPUT){
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 23       	and	r24, r24
     f92:	a9 f4       	brne	.+42     	; 0xfbe <DIO_vidSetPinDirection+0x1a0>
			CLR_BIT(DDRD,PinNum);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_vidSetPinDirection+0x194>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_vidSetPinDirection+0x190>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	13 c0       	rjmp	.+38     	; 0xfe4 <DIO_vidSetPinDirection+0x1c6>
		}
		else
		{
			SET_BIT(DDRD,PinNum);
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_vidSetPinDirection+0x1be>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_vidSetPinDirection+0x1ba>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24



	}
	}
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <DIO_vidSetPinValue>:
void DIO_vidSetPinValue		(u8 PortNum,u8 PinNum,u8 PinValue)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <DIO_vidSetPinValue+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <DIO_vidSetPinValue+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNum<=DIO_PORTD && PinNum<=DIO_PIN7)
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	08 f0       	brcs	.+2      	; 0x1010 <DIO_vidSetPinValue+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 30       	cpi	r24, 0x08	; 8
    1014:	08 f0       	brcs	.+2      	; 0x1018 <DIO_vidSetPinValue+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
		{
		switch(PortNum){
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_vidSetPinValue+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <DIO_vidSetPinValue+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <DIO_vidSetPinValue+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <DIO_vidSetPinValue+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <DIO_vidSetPinValue+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <DIO_vidSetPinValue+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_vidSetPinValue+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <DIO_vidSetPinValue+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
		case DIO_PORTA:
			if(PinValue==DIO_LOW){
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 23       	and	r24, r24
    1060:	a9 f4       	brne	.+42     	; 0x108c <DIO_vidSetPinValue+0x98>
				CLR_BIT(PORTA,PinNum);
    1062:	ab e3       	ldi	r26, 0x3B	; 59
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_vidSetPinValue+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_vidSetPinValue+0x88>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	97 c0       	rjmp	.+302    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,PinNum);
    108c:	ab e3       	ldi	r26, 0x3B	; 59
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e3       	ldi	r30, 0x3B	; 59
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_vidSetPinValue+0xb6>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_vidSetPinValue+0xb2>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			break;
		case DIO_PORTB:
			if(PinValue==DIO_LOW){
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 23       	and	r24, r24
    10b8:	a9 f4       	brne	.+42     	; 0x10e4 <DIO_vidSetPinValue+0xf0>
				CLR_BIT(PORTB,PinNum);
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_vidSetPinValue+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_vidSetPinValue+0xe0>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	6b c0       	rjmp	.+214    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,PinNum);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_vidSetPinValue+0x10e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_vidSetPinValue+0x10a>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			break;
		case DIO_PORTC:
			if(PinValue==DIO_LOW){
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 23       	and	r24, r24
    1110:	a9 f4       	brne	.+42     	; 0x113c <DIO_vidSetPinValue+0x148>
				CLR_BIT(PORTC,PinNum);
    1112:	a5 e3       	ldi	r26, 0x35	; 53
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e3       	ldi	r30, 0x35	; 53
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_vidSetPinValue+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_vidSetPinValue+0x138>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,PinNum);
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_vidSetPinValue+0x166>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_vidSetPinValue+0x162>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			break;

		case DIO_PORTD:
			if(PinValue==DIO_LOW){
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 23       	and	r24, r24
    1168:	a9 f4       	brne	.+42     	; 0x1194 <DIO_vidSetPinValue+0x1a0>
				CLR_BIT(PORTD,PinNum);
    116a:	a2 e3       	ldi	r26, 0x32	; 50
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e2 e3       	ldi	r30, 0x32	; 50
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_vidSetPinValue+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_vidSetPinValue+0x190>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	13 c0       	rjmp	.+38     	; 0x11ba <DIO_vidSetPinValue+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,PinNum);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_vidSetPinValue+0x1be>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_vidSetPinValue+0x1ba>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24


		}
		}

}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_vidTogPinValue>:
void DIO_vidTogPinValue		(u8 PortNum,u8 PinNum){
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_vidTogPinValue+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_vidTogPinValue+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	if(PortNum<=DIO_PORTD && PinNum<=DIO_PIN7)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <DIO_vidTogPinValue+0x18>
    11e0:	72 c0       	rjmp	.+228    	; 0x12c6 <DIO_vidTogPinValue+0xfc>
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	08 f0       	brcs	.+2      	; 0x11ea <DIO_vidTogPinValue+0x20>
    11e8:	6e c0       	rjmp	.+220    	; 0x12c6 <DIO_vidTogPinValue+0xfc>
		{
		switch(PortNum){
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3c 83       	std	Y+4, r19	; 0x04
    11f2:	2b 83       	std	Y+3, r18	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	49 f1       	breq	.+82     	; 0x1250 <DIO_vidTogPinValue+0x86>
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <DIO_vidTogPinValue+0x48>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	61 f0       	breq	.+24     	; 0x1228 <DIO_vidTogPinValue+0x5e>
    1210:	5a c0       	rjmp	.+180    	; 0x12c6 <DIO_vidTogPinValue+0xfc>
    1212:	2b 81       	ldd	r18, Y+3	; 0x03
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	71 f1       	breq	.+92     	; 0x1278 <DIO_vidTogPinValue+0xae>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	e9 f1       	breq	.+122    	; 0x12a0 <DIO_vidTogPinValue+0xd6>
    1226:	4f c0       	rjmp	.+158    	; 0x12c6 <DIO_vidTogPinValue+0xfc>
		case DIO_PORTA:
			TOG_BIT(PORTA,PinNum);
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_vidTogPinValue+0x7c>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_vidTogPinValue+0x78>
    124a:	84 27       	eor	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	3b c0       	rjmp	.+118    	; 0x12c6 <DIO_vidTogPinValue+0xfc>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB,PinNum);
    1250:	a8 e3       	ldi	r26, 0x38	; 56
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_vidTogPinValue+0xa4>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_vidTogPinValue+0xa0>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	27 c0       	rjmp	.+78     	; 0x12c6 <DIO_vidTogPinValue+0xfc>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC,PinNum);
    1278:	a5 e3       	ldi	r26, 0x35	; 53
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_vidTogPinValue+0xcc>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_vidTogPinValue+0xc8>
    129a:	84 27       	eor	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <DIO_vidTogPinValue+0xfc>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD,PinNum);
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_vidTogPinValue+0xf4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_vidTogPinValue+0xf0>
    12c2:	84 27       	eor	r24, r20
    12c4:	8c 93       	st	X, r24
			//Nothing
			break;
		}
		}

}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DIO_u8GetPinValue>:
u8 	 DIO_u8GetPinValue		(u8 PortNum,u8 PinNum){
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_u8GetPinValue+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_u8GetPinValue+0x8>
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Data=255;
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	89 83       	std	Y+1, r24	; 0x01
	if(PortNum<=DIO_PORTD && PinNum<=DIO_PIN7)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <DIO_u8GetPinValue+0x1e>
    12f0:	6b c0       	rjmp	.+214    	; 0x13c8 <DIO_u8GetPinValue+0xf4>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <DIO_u8GetPinValue+0x26>
    12f8:	67 c0       	rjmp	.+206    	; 0x13c8 <DIO_u8GetPinValue+0xf4>
		{
		switch(PortNum){
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	4c 81       	ldd	r20, Y+4	; 0x04
    1306:	5d 81       	ldd	r21, Y+5	; 0x05
    1308:	41 30       	cpi	r20, 0x01	; 1
    130a:	51 05       	cpc	r21, r1
    130c:	41 f1       	breq	.+80     	; 0x135e <DIO_u8GetPinValue+0x8a>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	34 f4       	brge	.+12     	; 0x1324 <DIO_u8GetPinValue+0x50>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	61 f0       	breq	.+24     	; 0x133a <DIO_u8GetPinValue+0x66>
    1322:	52 c0       	rjmp	.+164    	; 0x13c8 <DIO_u8GetPinValue+0xf4>
    1324:	4c 81       	ldd	r20, Y+4	; 0x04
    1326:	5d 81       	ldd	r21, Y+5	; 0x05
    1328:	42 30       	cpi	r20, 0x02	; 2
    132a:	51 05       	cpc	r21, r1
    132c:	51 f1       	breq	.+84     	; 0x1382 <DIO_u8GetPinValue+0xae>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	b9 f1       	breq	.+110    	; 0x13a6 <DIO_u8GetPinValue+0xd2>
    1338:	47 c0       	rjmp	.+142    	; 0x13c8 <DIO_u8GetPinValue+0xf4>
		case DIO_PORTA:
			Data=GET_BIT(PINA,PinNum);
    133a:	e9 e3       	ldi	r30, 0x39	; 57
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetPinValue+0x7e>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetPinValue+0x7a>
    1356:	ca 01       	movw	r24, r20
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	35 c0       	rjmp	.+106    	; 0x13c8 <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_PORTB:
			Data=GET_BIT(PINB,PinNum);
    135e:	e6 e3       	ldi	r30, 0x36	; 54
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8GetPinValue+0xa2>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_u8GetPinValue+0x9e>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	23 c0       	rjmp	.+70     	; 0x13c8 <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_PORTC:
			Data=GET_BIT(PINC,PinNum);
    1382:	e3 e3       	ldi	r30, 0x33	; 51
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8GetPinValue+0xc6>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_u8GetPinValue+0xc2>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	11 c0       	rjmp	.+34     	; 0x13c8 <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_PORTD:
			Data=GET_BIT(PIND,PinNum);
    13a6:	e0 e3       	ldi	r30, 0x30	; 48
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_u8GetPinValue+0xea>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_u8GetPinValue+0xe6>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
			//Nothing
			break;
		}
		}

	return Data;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <DIO_vidSetPortDirection>:

void DIO_vidSetPortDirection(u8 PortNum,u8 PortDir){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <DIO_vidSetPortDirection+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_vidSetPortDirection+0x8>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNum){
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3c 83       	std	Y+4, r19	; 0x04
    13f2:	2b 83       	std	Y+3, r18	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	d1 f0       	breq	.+52     	; 0x1432 <DIO_vidSetPortDirection+0x58>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	2c f4       	brge	.+10     	; 0x1412 <DIO_vidSetPortDirection+0x38>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	61 f0       	breq	.+24     	; 0x1428 <DIO_vidSetPortDirection+0x4e>
    1410:	1e c0       	rjmp	.+60     	; 0x144e <DIO_vidSetPortDirection+0x74>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	81 f0       	breq	.+32     	; 0x143c <DIO_vidSetPortDirection+0x62>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	81 f0       	breq	.+32     	; 0x1446 <DIO_vidSetPortDirection+0x6c>
    1426:	13 c0       	rjmp	.+38     	; 0x144e <DIO_vidSetPortDirection+0x74>
	case DIO_PORTA:
		DDRA = PortDir;
    1428:	ea e3       	ldi	r30, 0x3A	; 58
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	80 83       	st	Z, r24
    1430:	0e c0       	rjmp	.+28     	; 0x144e <DIO_vidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB = PortDir;
    1432:	e7 e3       	ldi	r30, 0x37	; 55
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	80 83       	st	Z, r24
    143a:	09 c0       	rjmp	.+18     	; 0x144e <DIO_vidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC = PortDir;
    143c:	e4 e3       	ldi	r30, 0x34	; 52
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	80 83       	st	Z, r24
    1444:	04 c0       	rjmp	.+8      	; 0x144e <DIO_vidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD = PortDir;
    1446:	e1 e3       	ldi	r30, 0x31	; 49
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	80 83       	st	Z, r24
		default:
			//Nothing
			break;
		}

}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_vidSetPortValue>:
void DIO_vidSetPortValue(u8 PortNum,u8 PortValue)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_vidSetPortValue+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_vidSetPortValue+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNum){
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <DIO_vidSetPortValue+0x58>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_vidSetPortValue+0x38>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <DIO_vidSetPortValue+0x4e>
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <DIO_vidSetPortValue+0x74>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <DIO_vidSetPortValue+0x62>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <DIO_vidSetPortValue+0x6c>
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <DIO_vidSetPortValue+0x74>
	case DIO_PORTA:
		PORTA = PortValue;
    14aa:	eb e3       	ldi	r30, 0x3B	; 59
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <DIO_vidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = PortValue;
    14b4:	e8 e3       	ldi	r30, 0x38	; 56
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <DIO_vidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = PortValue;
    14be:	e5 e3       	ldi	r30, 0x35	; 53
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <DIO_vidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = PortValue;
    14c8:	e2 e3       	ldi	r30, 0x32	; 50
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
		default:
			//Nothing
			break;
		}

}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <DIO_vidTogPortValue>:
void DIO_vidTogPortValue(u8 PortNum)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	2f 97       	sbiw	r28, 0x0f	; 15
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	89 83       	std	Y+1, r24	; 0x01
	switch(PortNum){
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3f 87       	std	Y+15, r19	; 0x0f
    14fc:	2e 87       	std	Y+14, r18	; 0x0e
    14fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1500:	9f 85       	ldd	r25, Y+15	; 0x0f
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	39 f1       	breq	.+78     	; 0x1556 <DIO_vidTogPortValue+0x78>
    1508:	ee 85       	ldd	r30, Y+14	; 0x0e
    150a:	ff 85       	ldd	r31, Y+15	; 0x0f
    150c:	e2 30       	cpi	r30, 0x02	; 2
    150e:	f1 05       	cpc	r31, r1
    1510:	34 f4       	brge	.+12     	; 0x151e <DIO_vidTogPortValue+0x40>
    1512:	2e 85       	ldd	r18, Y+14	; 0x0e
    1514:	3f 85       	ldd	r19, Y+15	; 0x0f
    1516:	21 15       	cp	r18, r1
    1518:	31 05       	cpc	r19, r1
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_vidTogPortValue+0x56>
    151c:	4e c0       	rjmp	.+156    	; 0x15ba <DIO_vidTogPortValue+0xdc>
    151e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1520:	9f 85       	ldd	r25, Y+15	; 0x0f
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	91 05       	cpc	r25, r1
    1526:	41 f1       	breq	.+80     	; 0x1578 <DIO_vidTogPortValue+0x9a>
    1528:	ee 85       	ldd	r30, Y+14	; 0x0e
    152a:	ff 85       	ldd	r31, Y+15	; 0x0f
    152c:	e3 30       	cpi	r30, 0x03	; 3
    152e:	f1 05       	cpc	r31, r1
    1530:	a1 f1       	breq	.+104    	; 0x159a <DIO_vidTogPortValue+0xbc>
    1532:	43 c0       	rjmp	.+134    	; 0x15ba <DIO_vidTogPortValue+0xdc>
		case DIO_PORTA:
			PORTA = !PORTA;
    1534:	2b e3       	ldi	r18, 0x3B	; 59
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3d 87       	std	Y+13, r19	; 0x0d
    153a:	2c 87       	std	Y+12, r18	; 0x0c
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	1b 86       	std	Y+11, r1	; 0x0b
    1544:	88 23       	and	r24, r24
    1546:	11 f4       	brne	.+4      	; 0x154c <DIO_vidTogPortValue+0x6e>
    1548:	31 e0       	ldi	r19, 0x01	; 1
    154a:	3b 87       	std	Y+11, r19	; 0x0b
    154c:	2b 85       	ldd	r18, Y+11	; 0x0b
    154e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1550:	fd 85       	ldd	r31, Y+13	; 0x0d
    1552:	20 83       	st	Z, r18
    1554:	32 c0       	rjmp	.+100    	; 0x15ba <DIO_vidTogPortValue+0xdc>
			break;
		case DIO_PORTB:
			PORTB = !PORTB;
    1556:	88 e3       	ldi	r24, 0x38	; 56
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9a 87       	std	Y+10, r25	; 0x0a
    155c:	89 87       	std	Y+9, r24	; 0x09
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	18 86       	std	Y+8, r1	; 0x08
    1566:	88 23       	and	r24, r24
    1568:	11 f4       	brne	.+4      	; 0x156e <DIO_vidTogPortValue+0x90>
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	98 87       	std	Y+8, r25	; 0x08
    156e:	28 85       	ldd	r18, Y+8	; 0x08
    1570:	e9 85       	ldd	r30, Y+9	; 0x09
    1572:	fa 85       	ldd	r31, Y+10	; 0x0a
    1574:	20 83       	st	Z, r18
    1576:	21 c0       	rjmp	.+66     	; 0x15ba <DIO_vidTogPortValue+0xdc>
			break;
		case DIO_PORTC:
			PORTC = !PORTD;
    1578:	85 e3       	ldi	r24, 0x35	; 53
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9f 83       	std	Y+7, r25	; 0x07
    157e:	8e 83       	std	Y+6, r24	; 0x06
    1580:	e2 e3       	ldi	r30, 0x32	; 50
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	1d 82       	std	Y+5, r1	; 0x05
    1588:	88 23       	and	r24, r24
    158a:	11 f4       	brne	.+4      	; 0x1590 <DIO_vidTogPortValue+0xb2>
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	9d 83       	std	Y+5, r25	; 0x05
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	ee 81       	ldd	r30, Y+6	; 0x06
    1594:	ff 81       	ldd	r31, Y+7	; 0x07
    1596:	20 83       	st	Z, r18
    1598:	10 c0       	rjmp	.+32     	; 0x15ba <DIO_vidTogPortValue+0xdc>
			break;
		case DIO_PORTD:
			PORTD = !PORTD;
    159a:	82 e3       	ldi	r24, 0x32	; 50
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	1a 82       	std	Y+2, r1	; 0x02
    15aa:	88 23       	and	r24, r24
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <DIO_vidTogPortValue+0xd4>
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	2a 81       	ldd	r18, Y+2	; 0x02
    15b4:	eb 81       	ldd	r30, Y+3	; 0x03
    15b6:	fc 81       	ldd	r31, Y+4	; 0x04
    15b8:	20 83       	st	Z, r18
			break;
			default:
				//Nothing
				break;
			}
}
    15ba:	2f 96       	adiw	r28, 0x0f	; 15
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_u8GetPortValue>:
u8 	 DIO_u8GetPortValue			(u8 PortNum){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_u8GetPortValue+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_u8GetPortValue+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Data;
	switch(PortNum)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3c 83       	std	Y+4, r19	; 0x04
    15e2:	2b 83       	std	Y+3, r18	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <DIO_u8GetPortValue+0x56>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <DIO_u8GetPortValue+0x36>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <DIO_u8GetPortValue+0x4c>
    1600:	1e c0       	rjmp	.+60     	; 0x163e <DIO_u8GetPortValue+0x72>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <DIO_u8GetPortValue+0x60>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	81 f0       	breq	.+32     	; 0x1636 <DIO_u8GetPortValue+0x6a>
    1616:	13 c0       	rjmp	.+38     	; 0x163e <DIO_u8GetPortValue+0x72>
	{
	case DIO_PORTA:
		Data=PINA;
    1618:	e9 e3       	ldi	r30, 0x39	; 57
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	0e c0       	rjmp	.+28     	; 0x163e <DIO_u8GetPortValue+0x72>
	break;
	case DIO_PORTB:
		Data=PINB;
    1622:	e6 e3       	ldi	r30, 0x36	; 54
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	09 c0       	rjmp	.+18     	; 0x163e <DIO_u8GetPortValue+0x72>
	break;
	case DIO_PORTC:
		Data=PINC;
    162c:	e3 e3       	ldi	r30, 0x33	; 51
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	04 c0       	rjmp	.+8      	; 0x163e <DIO_u8GetPortValue+0x72>
	break;
	case DIO_PORTD:
		Data=PIND;
    1636:	e0 e3       	ldi	r30, 0x30	; 48
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	89 83       	std	Y+1, r24	; 0x01
	break;
	default:
		//Nothing
		break;
	}
	return Data;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <DIO_vidSetNibble>:


void DIO_vidSetNibble(u8 PortNum,u8 Nibble,u8 Data)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <DIO_vidSetNibble+0x6>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DIO_vidSetNibble+0x8>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	6a 83       	std	Y+2, r22	; 0x02
    1660:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortNum)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3d 83       	std	Y+5, r19	; 0x05
    166a:	2c 83       	std	Y+4, r18	; 0x04
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <DIO_vidSetNibble+0x2a>
    1676:	40 c0       	rjmp	.+128    	; 0x16f8 <DIO_vidSetNibble+0xaa>
    1678:	2c 81       	ldd	r18, Y+4	; 0x04
    167a:	3d 81       	ldd	r19, Y+5	; 0x05
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <DIO_vidSetNibble+0x3e>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	71 f0       	breq	.+28     	; 0x16a6 <DIO_vidSetNibble+0x58>
    168a:	b0 c0       	rjmp	.+352    	; 0x17ec <DIO_vidSetNibble+0x19e>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_vidSetNibble+0x4a>
    1696:	59 c0       	rjmp	.+178    	; 0x174a <DIO_vidSetNibble+0xfc>
    1698:	8c 81       	ldd	r24, Y+4	; 0x04
    169a:	9d 81       	ldd	r25, Y+5	; 0x05
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <DIO_vidSetNibble+0x56>
    16a2:	7c c0       	rjmp	.+248    	; 0x179c <DIO_vidSetNibble+0x14e>
    16a4:	a3 c0       	rjmp	.+326    	; 0x17ec <DIO_vidSetNibble+0x19e>
	{
	case DIO_PORTA:
			if(Nibble == DIO_NIBBLE_LOW)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	88 23       	and	r24, r24
    16aa:	99 f4       	brne	.+38     	; 0x16d2 <DIO_vidSetNibble+0x84>
			{
				PORTA&=DIO_NIP_LOW_MASK;
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 7f       	andi	r24, 0xF0	; 240
    16b8:	8c 93       	st	X, r24
				Data&=DIO_DATA_HIGH_MASK;
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	8f 70       	andi	r24, 0x0F	; 15
    16be:	8b 83       	std	Y+3, r24	; 0x03
				PORTA|=Data;
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	90 81       	ld	r25, Z
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	89 2b       	or	r24, r25
    16ce:	8c 93       	st	X, r24
    16d0:	8d c0       	rjmp	.+282    	; 0x17ec <DIO_vidSetNibble+0x19e>
			}
			else//DIO_NIBBLE_HIGH
			{
				PORTA&=DIO_NIP_HIGH_MASK;
    16d2:	ab e3       	ldi	r26, 0x3B	; 59
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	eb e3       	ldi	r30, 0x3B	; 59
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 70       	andi	r24, 0x0F	; 15
    16de:	8c 93       	st	X, r24
				Data&=DIO_DATA_LOW_MASK;
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	80 7f       	andi	r24, 0xF0	; 240
    16e4:	8b 83       	std	Y+3, r24	; 0x03
				PORTA|=Data;
    16e6:	ab e3       	ldi	r26, 0x3B	; 59
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	90 81       	ld	r25, Z
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	89 2b       	or	r24, r25
    16f4:	8c 93       	st	X, r24
    16f6:	7a c0       	rjmp	.+244    	; 0x17ec <DIO_vidSetNibble+0x19e>
			}
		break;
		case DIO_PORTB:
			if(Nibble == DIO_NIBBLE_LOW)
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 23       	and	r24, r24
    16fc:	99 f4       	brne	.+38     	; 0x1724 <DIO_vidSetNibble+0xd6>
			{
				PORTB&=DIO_NIP_LOW_MASK;
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 7f       	andi	r24, 0xF0	; 240
    170a:	8c 93       	st	X, r24
				Data&=DIO_DATA_HIGH_MASK;
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	8b 83       	std	Y+3, r24	; 0x03
				PORTB|=Data;
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	90 81       	ld	r25, Z
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	89 2b       	or	r24, r25
    1720:	8c 93       	st	X, r24
    1722:	64 c0       	rjmp	.+200    	; 0x17ec <DIO_vidSetNibble+0x19e>
			}
			else//DIO_NIBBLE_HIGH
			{
				PORTB&=DIO_NIP_HIGH_MASK;
    1724:	a8 e3       	ldi	r26, 0x38	; 56
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e3       	ldi	r30, 0x38	; 56
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8f 70       	andi	r24, 0x0F	; 15
    1730:	8c 93       	st	X, r24
				Data&=DIO_DATA_LOW_MASK;
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	80 7f       	andi	r24, 0xF0	; 240
    1736:	8b 83       	std	Y+3, r24	; 0x03
				PORTB|=Data;
    1738:	a8 e3       	ldi	r26, 0x38	; 56
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	90 81       	ld	r25, Z
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	89 2b       	or	r24, r25
    1746:	8c 93       	st	X, r24
    1748:	51 c0       	rjmp	.+162    	; 0x17ec <DIO_vidSetNibble+0x19e>
			}

		break;
		case DIO_PORTC:
			if(Nibble == DIO_NIBBLE_LOW)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	88 23       	and	r24, r24
    174e:	99 f4       	brne	.+38     	; 0x1776 <DIO_vidSetNibble+0x128>
			{
				PORTC&=DIO_NIP_LOW_MASK;
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 7f       	andi	r24, 0xF0	; 240
    175c:	8c 93       	st	X, r24
				Data&=DIO_DATA_HIGH_MASK;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	8f 70       	andi	r24, 0x0F	; 15
    1762:	8b 83       	std	Y+3, r24	; 0x03
				PORTC|=Data;
    1764:	a5 e3       	ldi	r26, 0x35	; 53
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	90 81       	ld	r25, Z
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	89 2b       	or	r24, r25
    1772:	8c 93       	st	X, r24
    1774:	3b c0       	rjmp	.+118    	; 0x17ec <DIO_vidSetNibble+0x19e>
			}
			else//DIO_NIBBLE_HIGH
			{
				PORTC&=DIO_NIP_HIGH_MASK;
    1776:	a5 e3       	ldi	r26, 0x35	; 53
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 70       	andi	r24, 0x0F	; 15
    1782:	8c 93       	st	X, r24
				Data&=DIO_DATA_LOW_MASK;
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	80 7f       	andi	r24, 0xF0	; 240
    1788:	8b 83       	std	Y+3, r24	; 0x03
				PORTC|=Data;
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	89 2b       	or	r24, r25
    1798:	8c 93       	st	X, r24
    179a:	28 c0       	rjmp	.+80     	; 0x17ec <DIO_vidSetNibble+0x19e>
			}

		break;
		case DIO_PORTD:
			if(Nibble == DIO_NIBBLE_LOW)
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	88 23       	and	r24, r24
    17a0:	99 f4       	brne	.+38     	; 0x17c8 <DIO_vidSetNibble+0x17a>
			{
				PORTD&=DIO_NIP_LOW_MASK;
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 7f       	andi	r24, 0xF0	; 240
    17ae:	8c 93       	st	X, r24
				Data&=DIO_DATA_HIGH_MASK;
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	8f 70       	andi	r24, 0x0F	; 15
    17b4:	8b 83       	std	Y+3, r24	; 0x03
				PORTD|=Data;
    17b6:	a2 e3       	ldi	r26, 0x32	; 50
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	90 81       	ld	r25, Z
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	89 2b       	or	r24, r25
    17c4:	8c 93       	st	X, r24
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <DIO_vidSetNibble+0x19e>
			}
			else//DIO_NIBBLE_HIGH
			{
				PORTD&=DIO_NIP_HIGH_MASK;
    17c8:	a2 e3       	ldi	r26, 0x32	; 50
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	8c 93       	st	X, r24
				Data&=DIO_DATA_LOW_MASK;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	80 7f       	andi	r24, 0xF0	; 240
    17da:	8b 83       	std	Y+3, r24	; 0x03
				PORTD|=Data;
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	90 81       	ld	r25, Z
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	89 2b       	or	r24, r25
    17ea:	8c 93       	st	X, r24
		break;
		default:
			//Nothing
			break;
	}
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <ADCvidinit>:
#include "ADC_Private.h"

#include "util/delay.h"

void ADCvidinit(void)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	0f 92       	push	r0
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	ADMUX &= 0x00;
    1806:	e7 e2       	ldi	r30, 0x27	; 39
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	e7 e2       	ldi	r30, 0x27	; 39
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
	ADCSRA = 0;
    1812:	e6 e2       	ldi	r30, 0x26	; 38
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
	//set internal voltage ref
	ADMUX |= ADC_INTERNAL;
    1818:	a7 e2       	ldi	r26, 0x27	; 39
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e7 e2       	ldi	r30, 0x27	; 39
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 6c       	ori	r24, 0xC0	; 192
    1824:	8c 93       	st	X, r24
	// set prescaller
	ADCSRA |= ADC_PRESCALER;
    1826:	a6 e2       	ldi	r26, 0x26	; 38
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e6 e2       	ldi	r30, 0x26	; 38
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	87 60       	ori	r24, 0x07	; 7
    1832:	8c 93       	st	X, r24
	//turn on adc
	ADCSRA |= ADC_ENABLE;
    1834:	a6 e2       	ldi	r26, 0x26	; 38
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e2       	ldi	r30, 0x26	; 38
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	8c 93       	st	X, r24
	//start conversion
	ADCSRA |= ADC_START;
    1842:	a6 e2       	ldi	r26, 0x26	; 38
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e2       	ldi	r30, 0x26	; 38
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 64       	ori	r24, 0x40	; 64
    184e:	8c 93       	st	X, r24
}
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <ADCu16read>:


u16 ADCu16read(u8 channel)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF0;
    1864:	a7 e2       	ldi	r26, 0x27	; 39
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e7 e2       	ldi	r30, 0x27	; 39
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 7f       	andi	r24, 0xF0	; 240
    1870:	8c 93       	st	X, r24
	ADMUX |= channel;
    1872:	a7 e2       	ldi	r26, 0x27	; 39
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e2       	ldi	r30, 0x27	; 39
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	90 81       	ld	r25, Z
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	89 2b       	or	r24, r25
    1880:	8c 93       	st	X, r24
	ADCSRA |= ADC_START;
    1882:	a6 e2       	ldi	r26, 0x26	; 38
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e6 e2       	ldi	r30, 0x26	; 38
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA, 6));
    1890:	e6 e2       	ldi	r30, 0x26	; 38
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	83 70       	andi	r24, 0x03	; 3
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	90 70       	andi	r25, 0x00	; 0
    18a6:	88 23       	and	r24, r24
    18a8:	99 f7       	brne	.-26     	; 0x1890 <ADCu16read+0x38>
	return ADCDATA;
    18aa:	e4 e2       	ldi	r30, 0x24	; 36
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01

}
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <LCD_vidSendCommand>:

#include "LCD_Private.h"
#include "LCD_Config.h"
#include "LCD_Interface.h"

static void LCD_vidSendCommand(u8 Command){
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	6d 97       	sbiw	r28, 0x1d	; 29
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d

	//Select Command Register
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//Write Mode
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//Send 4MSB In data
	DIO_vidSetNibble(LCD_DATA_PORT,DIO_NIBBLE_HIGH,Command);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    18ea:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_vidSetNibble>

	//Pulse
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e4       	ldi	r27, 0x40	; 64
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_vidSendCommand+0x90>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_vidSendCommand+0x10e>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_vidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_vidSendCommand+0xf0>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_vidSendCommand+0xde>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_vidSendCommand+0xd2>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_vidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_vidSendCommand+0x11a>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//The rest of the data
	Command<<=4;
    19e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e8:	82 95       	swap	r24
    19ea:	80 7f       	andi	r24, 0xF0	; 240
    19ec:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vidSetNibble(LCD_DATA_PORT,DIO_NIBBLE_HIGH,Command);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    19f4:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_vidSetNibble>

	//Pulse
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e4       	ldi	r27, 0x40	; 64
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b
    1a0c:	9c 87       	std	Y+12, r25	; 0x0c
    1a0e:	ad 87       	std	Y+13, r26	; 0x0d
    1a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8f 83       	std	Y+7, r24	; 0x07
    1a2c:	98 87       	std	Y+8, r25	; 0x08
    1a2e:	a9 87       	std	Y+9, r26	; 0x09
    1a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <LCD_vidSendCommand+0x19a>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	3f c0       	rjmp	.+126    	; 0x1ad2 <LCD_vidSendCommand+0x218>
	else if (__tmp > 65535)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	4c f5       	brge	.+82     	; 0x1abe <LCD_vidSendCommand+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_vidSendCommand+0x1fa>
    1a96:	88 ec       	ldi	r24, 0xC8	; 200
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_vidSendCommand+0x1e8>
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <LCD_vidSendCommand+0x1dc>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <LCD_vidSendCommand+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_vidSendCommand+0x224>
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

}
    1af0:	6d 96       	adiw	r28, 0x1d	; 29
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LCD_vidInit>:

void LCD_vidInit(void){
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	c4 55       	subi	r28, 0x54	; 84
    1b10:	d0 40       	sbci	r29, 0x00	; 0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>

	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	64 e0       	ldi	r22, 0x04	; 4
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	65 e0       	ldi	r22, 0x05	; 5
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	66 e0       	ldi	r22, 0x06	; 6
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(LCD_CONTROL_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	67 e0       	ldi	r22, 0x07	; 7
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
    1b62:	fe 01       	movw	r30, r28
    1b64:	ef 5a       	subi	r30, 0xAF	; 175
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 ef       	ldi	r26, 0xF0	; 240
    1b6e:	b1 e4       	ldi	r27, 0x41	; 65
    1b70:	80 83       	st	Z, r24
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	a2 83       	std	Z+2, r26	; 0x02
    1b76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	03 5b       	subi	r16, 0xB3	; 179
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ef 5a       	subi	r30, 0xAF	; 175
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a ef       	ldi	r20, 0xFA	; 250
    1b92:	54 e4       	ldi	r21, 0x44	; 68
    1b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	a2 83       	std	Z+2, r26	; 0x02
    1ba4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e3 5b       	subi	r30, 0xB3	; 179
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	44 f4       	brge	.+16     	; 0x1bd4 <LCD_vidInit+0xd2>
		__ticks = 1;
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5b       	subi	r30, 0xB5	; 181
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	64 c0       	rjmp	.+200    	; 0x1c9c <LCD_vidInit+0x19a>
	else if (__tmp > 65535)
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e3 5b       	subi	r30, 0xB3	; 179
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	0c f0       	brlt	.+2      	; 0x1bf4 <LCD_vidInit+0xf2>
    1bf2:	43 c0       	rjmp	.+134    	; 0x1c7a <LCD_vidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ef 5a       	subi	r30, 0xAF	; 175
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8e 01       	movw	r16, r28
    1c14:	05 5b       	subi	r16, 0xB5	; 181
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	f8 01       	movw	r30, r16
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	1f c0       	rjmp	.+62     	; 0x1c6a <LCD_vidInit+0x168>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e7 5b       	subi	r30, 0xB7	; 183
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	88 ec       	ldi	r24, 0xC8	; 200
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e7 5b       	subi	r30, 0xB7	; 183
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_vidInit+0x142>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e7 5b       	subi	r30, 0xB7	; 183
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	de 01       	movw	r26, r28
    1c54:	a5 5b       	subi	r26, 0xB5	; 181
    1c56:	bf 4f       	sbci	r27, 0xFF	; 255
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e5 5b       	subi	r30, 0xB5	; 181
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	9c 93       	st	X, r25
    1c68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e5 5b       	subi	r30, 0xB5	; 181
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	d1 f6       	brne	.-76     	; 0x1c2c <LCD_vidInit+0x12a>
    1c78:	27 c0       	rjmp	.+78     	; 0x1cc8 <LCD_vidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	05 5b       	subi	r16, 0xB5	; 181
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e3 5b       	subi	r30, 0xB3	; 179
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	f8 01       	movw	r30, r16
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	de 01       	movw	r26, r28
    1c9e:	a9 5b       	subi	r26, 0xB9	; 185
    1ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e5 5b       	subi	r30, 0xB5	; 181
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	8d 93       	st	X+, r24
    1cae:	9c 93       	st	X, r25
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e9 5b       	subi	r30, 0xB9	; 185
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_vidInit+0x1b8>
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e9 5b       	subi	r30, 0xB9	; 185
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_vidSendCommand(RETURN_HOME);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ed 5b       	subi	r30, 0xBD	; 189
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e2       	ldi	r26, 0x20	; 32
    1cda:	b1 e4       	ldi	r27, 0x41	; 65
    1cdc:	80 83       	st	Z, r24
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	a2 83       	std	Z+2, r26	; 0x02
    1ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	01 5c       	subi	r16, 0xC1	; 193
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	ed 5b       	subi	r30, 0xBD	; 189
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	f8 01       	movw	r30, r16
    1d0a:	80 83       	st	Z, r24
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	a2 83       	std	Z+2, r26	; 0x02
    1d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d12:	fe 01       	movw	r30, r28
    1d14:	ff 96       	adiw	r30, 0x3f	; 63
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <LCD_vidInit+0x236>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e af       	std	Y+62, r25	; 0x3e
    1d34:	8d af       	std	Y+61, r24	; 0x3d
    1d36:	46 c0       	rjmp	.+140    	; 0x1dc4 <LCD_vidInit+0x2c2>
	else if (__tmp > 65535)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ff 96       	adiw	r30, 0x3f	; 63
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	64 f5       	brge	.+88     	; 0x1dac <LCD_vidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	fe 01       	movw	r30, r28
    1d56:	ed 5b       	subi	r30, 0xBD	; 189
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9e af       	std	Y+62, r25	; 0x3e
    1d80:	8d af       	std	Y+61, r24	; 0x3d
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <LCD_vidInit+0x2a0>
    1d84:	88 ec       	ldi	r24, 0xC8	; 200
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9c af       	std	Y+60, r25	; 0x3c
    1d8a:	8b af       	std	Y+59, r24	; 0x3b
    1d8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_vidInit+0x28e>
    1d94:	9c af       	std	Y+60, r25	; 0x3c
    1d96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	9e af       	std	Y+62, r25	; 0x3e
    1da0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1da4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	69 f7       	brne	.-38     	; 0x1d84 <LCD_vidInit+0x282>
    1daa:	16 c0       	rjmp	.+44     	; 0x1dd8 <LCD_vidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	fe 01       	movw	r30, r28
    1dae:	ff 96       	adiw	r30, 0x3f	; 63
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9e af       	std	Y+62, r25	; 0x3e
    1dc2:	8d af       	std	Y+61, r24	; 0x3d
    1dc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dc8:	9a af       	std	Y+58, r25	; 0x3a
    1dca:	89 af       	std	Y+57, r24	; 0x39
    1dcc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dce:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_vidInit+0x2ce>
    1dd4:	9a af       	std	Y+58, r25	; 0x3a
    1dd6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vidSendCommand(FUNCTION_SET);
    1dd8:	88 e2       	ldi	r24, 0x28	; 40
    1dda:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e4       	ldi	r27, 0x40	; 64
    1de6:	8d ab       	std	Y+53, r24	; 0x35
    1de8:	9e ab       	std	Y+54, r25	; 0x36
    1dea:	af ab       	std	Y+55, r26	; 0x37
    1dec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	6d a9       	ldd	r22, Y+53	; 0x35
    1df0:	7e a9       	ldd	r23, Y+54	; 0x36
    1df2:	8f a9       	ldd	r24, Y+55	; 0x37
    1df4:	98 ad       	ldd	r25, Y+56	; 0x38
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a ef       	ldi	r20, 0xFA	; 250
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	89 ab       	std	Y+49, r24	; 0x31
    1e08:	9a ab       	std	Y+50, r25	; 0x32
    1e0a:	ab ab       	std	Y+51, r26	; 0x33
    1e0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e10:	7a a9       	ldd	r23, Y+50	; 0x32
    1e12:	8b a9       	ldd	r24, Y+51	; 0x33
    1e14:	9c a9       	ldd	r25, Y+52	; 0x34
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <LCD_vidInit+0x32e>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	98 ab       	std	Y+48, r25	; 0x30
    1e2c:	8f a7       	std	Y+47, r24	; 0x2f
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <LCD_vidInit+0x3ac>
	else if (__tmp > 65535)
    1e30:	69 a9       	ldd	r22, Y+49	; 0x31
    1e32:	7a a9       	ldd	r23, Y+50	; 0x32
    1e34:	8b a9       	ldd	r24, Y+51	; 0x33
    1e36:	9c a9       	ldd	r25, Y+52	; 0x34
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <LCD_vidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	98 ab       	std	Y+48, r25	; 0x30
    1e6e:	8f a7       	std	Y+47, r24	; 0x2f
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <LCD_vidInit+0x38e>
    1e72:	88 ec       	ldi	r24, 0xC8	; 200
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9e a7       	std	Y+46, r25	; 0x2e
    1e78:	8d a7       	std	Y+45, r24	; 0x2d
    1e7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_vidInit+0x37c>
    1e82:	9e a7       	std	Y+46, r25	; 0x2e
    1e84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e88:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	98 ab       	std	Y+48, r25	; 0x30
    1e8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e92:	98 a9       	ldd	r25, Y+48	; 0x30
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <LCD_vidInit+0x370>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <LCD_vidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	98 ab       	std	Y+48, r25	; 0x30
    1eac:	8f a7       	std	Y+47, r24	; 0x2f
    1eae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb2:	9c a7       	std	Y+44, r25	; 0x2c
    1eb4:	8b a7       	std	Y+43, r24	; 0x2b
    1eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_vidInit+0x3b8>
    1ebe:	9c a7       	std	Y+44, r25	; 0x2c
    1ec0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vidSendCommand(DISPLAY_CURSOR);
    1ec2:	8f e0       	ldi	r24, 0x0F	; 15
    1ec4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e4       	ldi	r27, 0x40	; 64
    1ed0:	8f a3       	std	Y+39, r24	; 0x27
    1ed2:	98 a7       	std	Y+40, r25	; 0x28
    1ed4:	a9 a7       	std	Y+41, r26	; 0x29
    1ed6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eda:	78 a5       	ldd	r23, Y+40	; 0x28
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8b a3       	std	Y+35, r24	; 0x23
    1ef2:	9c a3       	std	Y+36, r25	; 0x24
    1ef4:	ad a3       	std	Y+37, r26	; 0x25
    1ef6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    1efa:	7c a1       	ldd	r23, Y+36	; 0x24
    1efc:	8d a1       	ldd	r24, Y+37	; 0x25
    1efe:	9e a1       	ldd	r25, Y+38	; 0x26
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <LCD_vidInit+0x418>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <LCD_vidInit+0x496>
	else if (__tmp > 65535)
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <LCD_vidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	6f a1       	ldd	r22, Y+39	; 0x27
    1f34:	78 a5       	ldd	r23, Y+40	; 0x28
    1f36:	89 a5       	ldd	r24, Y+41	; 0x29
    1f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <LCD_vidInit+0x478>
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 a3       	std	Y+32, r25	; 0x20
    1f62:	8f 8f       	std	Y+31, r24	; 0x1f
    1f64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f66:	98 a1       	ldd	r25, Y+32	; 0x20
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_vidInit+0x466>
    1f6c:	98 a3       	std	Y+32, r25	; 0x20
    1f6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9a a3       	std	Y+34, r25	; 0x22
    1f78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <LCD_vidInit+0x45a>
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <LCD_vidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	6b a1       	ldd	r22, Y+35	; 0x23
    1f86:	7c a1       	ldd	r23, Y+36	; 0x24
    1f88:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_vidInit+0x4a2>
    1fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    1faa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidSendCommand(ENTRY_MODE);
    1fac:	86 e0       	ldi	r24, 0x06	; 6
    1fae:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e0       	ldi	r26, 0x00	; 0
    1fb8:	b0 e4       	ldi	r27, 0x40	; 64
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
    1fdc:	9e 8b       	std	Y+22, r25	; 0x16
    1fde:	af 8b       	std	Y+23, r26	; 0x17
    1fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_vidInit+0x502>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_vidInit+0x580>
	else if (__tmp > 65535)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_vidInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_vidInit+0x562>
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	89 8b       	std	Y+17, r24	; 0x11
    204e:	89 89       	ldd	r24, Y+17	; 0x11
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_vidInit+0x550>
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_vidInit+0x544>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_vidInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6d 89       	ldd	r22, Y+21	; 0x15
    2070:	7e 89       	ldd	r23, Y+22	; 0x16
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_vidInit+0x58c>
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidSendCommand(CLEAR_DISPALY);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	a0 e4       	ldi	r26, 0x40	; 64
    20a2:	b0 e4       	ldi	r27, 0x40	; 64
    20a4:	8b 87       	std	Y+11, r24	; 0x0b
    20a6:	9c 87       	std	Y+12, r25	; 0x0c
    20a8:	ad 87       	std	Y+13, r26	; 0x0d
    20aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a ef       	ldi	r20, 0xFA	; 250
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8f 83       	std	Y+7, r24	; 0x07
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	a9 87       	std	Y+9, r26	; 0x09
    20ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_vidInit+0x5ec>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <LCD_vidInit+0x66a>
	else if (__tmp > 65535)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <LCD_vidInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_vidInit+0x64c>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_vidInit+0x63a>
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <LCD_vidInit+0x62e>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <LCD_vidInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_vidInit+0x676>
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);

}
    2180:	cc 5a       	subi	r28, 0xAC	; 172
    2182:	df 4f       	sbci	r29, 0xFF	; 255
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <LCD_vidSendChar>:

void LCD_vidSendChar(u8 Data){
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	e9 97       	sbiw	r28, 0x39	; 57
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	89 af       	std	Y+57, r24	; 0x39
	//Select Address Register
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//Write Mode
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//Data Send MSB of Data
	DIO_vidSetNibble(LCD_DATA_PORT,DIO_NIBBLE_HIGH,Data);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	49 ad       	ldd	r20, Y+57	; 0x39
    21c8:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_vidSetNibble>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e4       	ldi	r27, 0x40	; 64
    21d4:	8d ab       	std	Y+53, r24	; 0x35
    21d6:	9e ab       	std	Y+54, r25	; 0x36
    21d8:	af ab       	std	Y+55, r26	; 0x37
    21da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6d a9       	ldd	r22, Y+53	; 0x35
    21de:	7e a9       	ldd	r23, Y+54	; 0x36
    21e0:	8f a9       	ldd	r24, Y+55	; 0x37
    21e2:	98 ad       	ldd	r25, Y+56	; 0x38
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	89 ab       	std	Y+49, r24	; 0x31
    21f6:	9a ab       	std	Y+50, r25	; 0x32
    21f8:	ab ab       	std	Y+51, r26	; 0x33
    21fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21fc:	69 a9       	ldd	r22, Y+49	; 0x31
    21fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2200:	8b a9       	ldd	r24, Y+51	; 0x33
    2202:	9c a9       	ldd	r25, Y+52	; 0x34
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_vidSendChar+0x86>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	98 ab       	std	Y+48, r25	; 0x30
    221a:	8f a7       	std	Y+47, r24	; 0x2f
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_vidSendChar+0x104>
	else if (__tmp > 65535)
    221e:	69 a9       	ldd	r22, Y+49	; 0x31
    2220:	7a a9       	ldd	r23, Y+50	; 0x32
    2222:	8b a9       	ldd	r24, Y+51	; 0x33
    2224:	9c a9       	ldd	r25, Y+52	; 0x34
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_vidSendChar+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6d a9       	ldd	r22, Y+53	; 0x35
    2238:	7e a9       	ldd	r23, Y+54	; 0x36
    223a:	8f a9       	ldd	r24, Y+55	; 0x37
    223c:	98 ad       	ldd	r25, Y+56	; 0x38
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	98 ab       	std	Y+48, r25	; 0x30
    225c:	8f a7       	std	Y+47, r24	; 0x2f
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_vidSendChar+0xe6>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e a7       	std	Y+46, r25	; 0x2e
    2266:	8d a7       	std	Y+45, r24	; 0x2d
    2268:	8d a5       	ldd	r24, Y+45	; 0x2d
    226a:	9e a5       	ldd	r25, Y+46	; 0x2e
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_vidSendChar+0xd4>
    2270:	9e a7       	std	Y+46, r25	; 0x2e
    2272:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8f a5       	ldd	r24, Y+47	; 0x2f
    2276:	98 a9       	ldd	r25, Y+48	; 0x30
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2280:	98 a9       	ldd	r25, Y+48	; 0x30
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_vidSendChar+0xc8>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <LCD_vidSendChar+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	69 a9       	ldd	r22, Y+49	; 0x31
    228a:	7a a9       	ldd	r23, Y+50	; 0x32
    228c:	8b a9       	ldd	r24, Y+51	; 0x33
    228e:	9c a9       	ldd	r25, Y+52	; 0x34
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	98 ab       	std	Y+48, r25	; 0x30
    229a:	8f a7       	std	Y+47, r24	; 0x2f
    229c:	8f a5       	ldd	r24, Y+47	; 0x2f
    229e:	98 a9       	ldd	r25, Y+48	; 0x30
    22a0:	9c a7       	std	Y+44, r25	; 0x2c
    22a2:	8b a7       	std	Y+43, r24	; 0x2b
    22a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_vidSendChar+0x110>
    22ac:	9c a7       	std	Y+44, r25	; 0x2c
    22ae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	//Pulse
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e0       	ldi	r26, 0x00	; 0
    22c0:	b0 e4       	ldi	r27, 0x40	; 64
    22c2:	8f a3       	std	Y+39, r24	; 0x27
    22c4:	98 a7       	std	Y+40, r25	; 0x28
    22c6:	a9 a7       	std	Y+41, r26	; 0x29
    22c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6f a1       	ldd	r22, Y+39	; 0x27
    22cc:	78 a5       	ldd	r23, Y+40	; 0x28
    22ce:	89 a5       	ldd	r24, Y+41	; 0x29
    22d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8b a3       	std	Y+35, r24	; 0x23
    22e4:	9c a3       	std	Y+36, r25	; 0x24
    22e6:	ad a3       	std	Y+37, r26	; 0x25
    22e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_vidSendChar+0x174>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_vidSendChar+0x1f2>
	else if (__tmp > 65535)
    230c:	6b a1       	ldd	r22, Y+35	; 0x23
    230e:	7c a1       	ldd	r23, Y+36	; 0x24
    2310:	8d a1       	ldd	r24, Y+37	; 0x25
    2312:	9e a1       	ldd	r25, Y+38	; 0x26
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_vidSendChar+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6f a1       	ldd	r22, Y+39	; 0x27
    2326:	78 a5       	ldd	r23, Y+40	; 0x28
    2328:	89 a5       	ldd	r24, Y+41	; 0x29
    232a:	9a a5       	ldd	r25, Y+42	; 0x2a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9a a3       	std	Y+34, r25	; 0x22
    234a:	89 a3       	std	Y+33, r24	; 0x21
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_vidSendChar+0x1d4>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	98 a3       	std	Y+32, r25	; 0x20
    2354:	8f 8f       	std	Y+31, r24	; 0x1f
    2356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2358:	98 a1       	ldd	r25, Y+32	; 0x20
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_vidSendChar+0x1c2>
    235e:	98 a3       	std	Y+32, r25	; 0x20
    2360:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	9a a1       	ldd	r25, Y+34	; 0x22
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_vidSendChar+0x1b6>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_vidSendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9a a3       	std	Y+34, r25	; 0x22
    2388:	89 a3       	std	Y+33, r24	; 0x21
    238a:	89 a1       	ldd	r24, Y+33	; 0x21
    238c:	9a a1       	ldd	r25, Y+34	; 0x22
    238e:	9e 8f       	std	Y+30, r25	; 0x1e
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
    2392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2394:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_vidSendChar+0x1fe>
    239a:	9e 8f       	std	Y+30, r25	; 0x1e
    239c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

	//Send LSB of Data
	Data<<=4;
    23a8:	89 ad       	ldd	r24, Y+57	; 0x39
    23aa:	82 95       	swap	r24
    23ac:	80 7f       	andi	r24, 0xF0	; 240
    23ae:	89 af       	std	Y+57, r24	; 0x39
	//Data Send
	DIO_vidSetNibble(LCD_DATA_PORT,DIO_NIBBLE_HIGH,Data);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	49 ad       	ldd	r20, Y+57	; 0x39
    23b6:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_vidSetNibble>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	b0 e4       	ldi	r27, 0x40	; 64
    23c2:	89 8f       	std	Y+25, r24	; 0x19
    23c4:	9a 8f       	std	Y+26, r25	; 0x1a
    23c6:	ab 8f       	std	Y+27, r26	; 0x1b
    23c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	69 8d       	ldd	r22, Y+25	; 0x19
    23cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8d 8b       	std	Y+21, r24	; 0x15
    23e4:	9e 8b       	std	Y+22, r25	; 0x16
    23e6:	af 8b       	std	Y+23, r26	; 0x17
    23e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <LCD_vidSendChar+0x274>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
    240a:	3f c0       	rjmp	.+126    	; 0x248a <LCD_vidSendChar+0x2f2>
	else if (__tmp > 65535)
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <LCD_vidSendChar+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	69 8d       	ldd	r22, Y+25	; 0x19
    2426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	0f c0       	rjmp	.+30     	; 0x246c <LCD_vidSendChar+0x2d4>
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9a 8b       	std	Y+18, r25	; 0x12
    2454:	89 8b       	std	Y+17, r24	; 0x11
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	9a 89       	ldd	r25, Y+18	; 0x12
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_vidSendChar+0x2c2>
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <LCD_vidSendChar+0x2b6>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <LCD_vidSendChar+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	8b 89       	ldd	r24, Y+19	; 0x13
    248c:	9c 89       	ldd	r25, Y+20	; 0x14
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
    2492:	8f 85       	ldd	r24, Y+15	; 0x0f
    2494:	98 89       	ldd	r25, Y+16	; 0x10
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_vidSendChar+0x2fe>
    249a:	98 8b       	std	Y+16, r25	; 0x10
    249c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//Pulse
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e4       	ldi	r27, 0x40	; 64
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <LCD_vidSendChar+0x362>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <LCD_vidSendChar+0x3e0>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <LCD_vidSendChar+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <LCD_vidSendChar+0x3c2>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_vidSendChar+0x3b0>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <LCD_vidSendChar+0x3a4>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <LCD_vidSendChar+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_vidSendChar+0x3ec>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	62 e0       	ldi	r22, 0x02	; 2
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>

}
    2596:	e9 96       	adiw	r28, 0x39	; 57
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_vidSendNum>:

void LCD_vidSendNum(u32 Data ){
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	60 97       	sbiw	r28, 0x10	; 16
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	6d 87       	std	Y+13, r22	; 0x0d
    25c2:	7e 87       	std	Y+14, r23	; 0x0e
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
    25c6:	98 8b       	std	Y+16, r25	; 0x10
	u8 ArrOfDigit[10];
	u8 i=0;
    25c8:	1a 82       	std	Y+2, r1	; 0x02
    25ca:	2d c0       	rjmp	.+90     	; 0x2626 <LCD_vidSendNum+0x7e>
	while(Data!=0)
	{
		//Save Digits from least in the array
		ArrOfDigit[i]=Data%10;
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	08 2f       	mov	r16, r24
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d6:	af 85       	ldd	r26, Y+15	; 0x0f
    25d8:	b8 89       	ldd	r27, Y+16	; 0x10
    25da:	2a e0       	ldi	r18, 0x0A	; 10
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__udivmodsi4>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	28 2f       	mov	r18, r24
    25f0:	ce 01       	movw	r24, r28
    25f2:	03 96       	adiw	r24, 0x03	; 3
    25f4:	fc 01       	movw	r30, r24
    25f6:	e0 0f       	add	r30, r16
    25f8:	f1 1f       	adc	r31, r17
    25fa:	20 83       	st	Z, r18
		//Throw the smallest digit away
		Data/=10;
    25fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2600:	af 85       	ldd	r26, Y+15	; 0x0f
    2602:	b8 89       	ldd	r27, Y+16	; 0x10
    2604:	2a e0       	ldi	r18, 0x0A	; 10
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__udivmodsi4>
    2614:	da 01       	movw	r26, r20
    2616:	c9 01       	movw	r24, r18
    2618:	8d 87       	std	Y+13, r24	; 0x0d
    261a:	9e 87       	std	Y+14, r25	; 0x0e
    261c:	af 87       	std	Y+15, r26	; 0x0f
    261e:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vidSendNum(u32 Data ){
	u8 ArrOfDigit[10];
	u8 i=0;
	while(Data!=0)
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	af 85       	ldd	r26, Y+15	; 0x0f
    262c:	b8 89       	ldd	r27, Y+16	; 0x10
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	a1 05       	cpc	r26, r1
    2632:	b1 05       	cpc	r27, r1
    2634:	59 f6       	brne	.-106    	; 0x25cc <LCD_vidSendNum+0x24>
		ArrOfDigit[i]=Data%10;
		//Throw the smallest digit away
		Data/=10;
		i++;
	}
	for(s8 j=i-1;j>=0 ;j--)
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	81 50       	subi	r24, 0x01	; 1
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	11 c0       	rjmp	.+34     	; 0x2660 <LCD_vidSendNum+0xb8>
	{
		//Send The data +48 --> Refer to the ascii table
		LCD_vidSendChar(ArrOfDigit[j]+48);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	28 2f       	mov	r18, r24
    2642:	33 27       	eor	r19, r19
    2644:	27 fd       	sbrc	r18, 7
    2646:	30 95       	com	r19
    2648:	ce 01       	movw	r24, r28
    264a:	03 96       	adiw	r24, 0x03	; 3
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	80 5d       	subi	r24, 0xD0	; 208
    2656:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_vidSendChar>
		ArrOfDigit[i]=Data%10;
		//Throw the smallest digit away
		Data/=10;
		i++;
	}
	for(s8 j=i-1;j>=0 ;j--)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	81 50       	subi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 23       	and	r24, r24
    2664:	64 f7       	brge	.-40     	; 0x263e <LCD_vidSendNum+0x96>
	{
		//Send The data +48 --> Refer to the ascii table
		LCD_vidSendChar(ArrOfDigit[j]+48);
	}
}
    2666:	60 96       	adiw	r28, 0x10	; 16
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <LCD_vidSetPositon>:

void LCD_vidSetPositon(u8 LineNum, u8 ColumnNum)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <LCD_vidSetPositon+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
	if(LineNum == LCD_LINE1){
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 23       	and	r24, r24
    268e:	29 f4       	brne	.+10     	; 0x269a <LCD_vidSetPositon+0x1e>
		LCD_vidSendCommand( LINE_1_ADDRESS + ColumnNum );//Address  1 000 0000
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	80 58       	subi	r24, 0x80	; 128
    2694:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <LCD_vidSetPositon+0x26>
	}
	else //if(LineNum == LCD_LINE2)
	{
		LCD_vidSendCommand( LINE_2_ADDRESS + ColumnNum - 1 ) ;
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	81 54       	subi	r24, 0x41	; 65
    269e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD_vidSendCommand>
	}


}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_vidSendString>:

void LCD_vidSendString(u8* String)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <LCD_vidSendString+0x6>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0; *(String+i) != 0 ;i++)
    26bc:	19 82       	std	Y+1, r1	; 0x01
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <LCD_vidSendString+0x30>
	{
		LCD_vidSendChar(*(String+i));
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	fc 01       	movw	r30, r24
    26cc:	e2 0f       	add	r30, r18
    26ce:	f3 1f       	adc	r31, r19
    26d0:	80 81       	ld	r24, Z
    26d2:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_vidSendChar>

}

void LCD_vidSendString(u8* String)
{
	for(u8 i = 0; *(String+i) != 0 ;i++)
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	80 81       	ld	r24, Z
    26ee:	88 23       	and	r24, r24
    26f0:	39 f7       	brne	.-50     	; 0x26c0 <LCD_vidSendString+0x14>
//		if (*(String+i) == '\0')
//			break;
	}


}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <Seg_vidInit>:




void Seg_vidInit(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62

	DIO_vidSetPinDirection(SEG_Port, SEG_PinA, DIO_PIN_OUTPUT);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinB, DIO_PIN_OUTPUT);
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinC, DIO_PIN_OUTPUT);
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	62 e0       	ldi	r22, 0x02	; 2
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinD, DIO_PIN_OUTPUT);
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	63 e0       	ldi	r22, 0x03	; 3
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinE, DIO_PIN_OUTPUT);
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	64 e0       	ldi	r22, 0x04	; 4
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinF, DIO_PIN_OUTPUT);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	65 e0       	ldi	r22, 0x05	; 5
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection(SEG_Port, SEG_PinG, DIO_PIN_OUTPUT);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	66 e0       	ldi	r22, 0x06	; 6
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinDirection>

}
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <Seg_vidDispaly>:


void Seg_vidDispaly(u8 Data)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	00 d0       	rcall	.+0      	; 0x2758 <Seg_vidDispaly+0x6>
    2758:	0f 92       	push	r0
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	89 83       	std	Y+1, r24	; 0x01
	switch(Data)
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	3b 83       	std	Y+3, r19	; 0x03
    2768:	2a 83       	std	Y+2, r18	; 0x02
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	84 30       	cpi	r24, 0x04	; 4
    2770:	91 05       	cpc	r25, r1
    2772:	09 f4       	brne	.+2      	; 0x2776 <Seg_vidDispaly+0x24>
    2774:	d7 c0       	rjmp	.+430    	; 0x2924 <Seg_vidDispaly+0x1d2>
    2776:	2a 81       	ldd	r18, Y+2	; 0x02
    2778:	3b 81       	ldd	r19, Y+3	; 0x03
    277a:	25 30       	cpi	r18, 0x05	; 5
    277c:	31 05       	cpc	r19, r1
    277e:	ec f4       	brge	.+58     	; 0x27ba <Seg_vidDispaly+0x68>
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	91 05       	cpc	r25, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <Seg_vidDispaly+0x3a>
    278a:	60 c0       	rjmp	.+192    	; 0x284c <Seg_vidDispaly+0xfa>
    278c:	2a 81       	ldd	r18, Y+2	; 0x02
    278e:	3b 81       	ldd	r19, Y+3	; 0x03
    2790:	22 30       	cpi	r18, 0x02	; 2
    2792:	31 05       	cpc	r19, r1
    2794:	2c f4       	brge	.+10     	; 0x27a0 <Seg_vidDispaly+0x4e>
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	99 f1       	breq	.+102    	; 0x2804 <Seg_vidDispaly+0xb2>
    279e:	99 c1       	rjmp	.+818    	; 0x2ad2 <Seg_vidDispaly+0x380>
    27a0:	2a 81       	ldd	r18, Y+2	; 0x02
    27a2:	3b 81       	ldd	r19, Y+3	; 0x03
    27a4:	22 30       	cpi	r18, 0x02	; 2
    27a6:	31 05       	cpc	r19, r1
    27a8:	09 f4       	brne	.+2      	; 0x27ac <Seg_vidDispaly+0x5a>
    27aa:	74 c0       	rjmp	.+232    	; 0x2894 <Seg_vidDispaly+0x142>
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	83 30       	cpi	r24, 0x03	; 3
    27b2:	91 05       	cpc	r25, r1
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <Seg_vidDispaly+0x66>
    27b6:	92 c0       	rjmp	.+292    	; 0x28dc <Seg_vidDispaly+0x18a>
    27b8:	8c c1       	rjmp	.+792    	; 0x2ad2 <Seg_vidDispaly+0x380>
    27ba:	2a 81       	ldd	r18, Y+2	; 0x02
    27bc:	3b 81       	ldd	r19, Y+3	; 0x03
    27be:	27 30       	cpi	r18, 0x07	; 7
    27c0:	31 05       	cpc	r19, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <Seg_vidDispaly+0x74>
    27c4:	1b c1       	rjmp	.+566    	; 0x29fc <Seg_vidDispaly+0x2aa>
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	88 30       	cpi	r24, 0x08	; 8
    27cc:	91 05       	cpc	r25, r1
    27ce:	6c f4       	brge	.+26     	; 0x27ea <Seg_vidDispaly+0x98>
    27d0:	2a 81       	ldd	r18, Y+2	; 0x02
    27d2:	3b 81       	ldd	r19, Y+3	; 0x03
    27d4:	25 30       	cpi	r18, 0x05	; 5
    27d6:	31 05       	cpc	r19, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <Seg_vidDispaly+0x8a>
    27da:	c8 c0       	rjmp	.+400    	; 0x296c <Seg_vidDispaly+0x21a>
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	86 30       	cpi	r24, 0x06	; 6
    27e2:	91 05       	cpc	r25, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <Seg_vidDispaly+0x96>
    27e6:	e6 c0       	rjmp	.+460    	; 0x29b4 <Seg_vidDispaly+0x262>
    27e8:	74 c1       	rjmp	.+744    	; 0x2ad2 <Seg_vidDispaly+0x380>
    27ea:	2a 81       	ldd	r18, Y+2	; 0x02
    27ec:	3b 81       	ldd	r19, Y+3	; 0x03
    27ee:	28 30       	cpi	r18, 0x08	; 8
    27f0:	31 05       	cpc	r19, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <Seg_vidDispaly+0xa4>
    27f4:	27 c1       	rjmp	.+590    	; 0x2a44 <Seg_vidDispaly+0x2f2>
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	89 30       	cpi	r24, 0x09	; 9
    27fc:	91 05       	cpc	r25, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <Seg_vidDispaly+0xb0>
    2800:	45 c1       	rjmp	.+650    	; 0x2a8c <Seg_vidDispaly+0x33a>
    2802:	67 c1       	rjmp	.+718    	; 0x2ad2 <Seg_vidDispaly+0x380>
	{
	case 0:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	62 e0       	ldi	r22, 0x02	; 2
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	63 e0       	ldi	r22, 0x03	; 3
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_HIGH);
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	64 e0       	ldi	r22, 0x04	; 4
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	65 e0       	ldi	r22, 0x05	; 5
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_LOW);
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	66 e0       	ldi	r22, 0x06	; 6
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    284a:	43 c1       	rjmp	.+646    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 1:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_LOW);
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    2856:	83 e0       	ldi	r24, 0x03	; 3
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2860:	83 e0       	ldi	r24, 0x03	; 3
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_LOW);
    286a:	83 e0       	ldi	r24, 0x03	; 3
    286c:	63 e0       	ldi	r22, 0x03	; 3
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    2874:	83 e0       	ldi	r24, 0x03	; 3
    2876:	64 e0       	ldi	r22, 0x04	; 4
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_LOW);
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	65 e0       	ldi	r22, 0x05	; 5
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_LOW);
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	66 e0       	ldi	r22, 0x06	; 6
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    2892:	1f c1       	rjmp	.+574    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 2:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_LOW);
    28a8:	83 e0       	ldi	r24, 0x03	; 3
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	63 e0       	ldi	r22, 0x03	; 3
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_HIGH);
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_LOW);
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	65 e0       	ldi	r22, 0x05	; 5
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	66 e0       	ldi	r22, 0x06	; 6
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    28da:	fb c0       	rjmp	.+502    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 3:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    28e6:	83 e0       	ldi	r24, 0x03	; 3
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	62 e0       	ldi	r22, 0x02	; 2
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    28fa:	83 e0       	ldi	r24, 0x03	; 3
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	64 e0       	ldi	r22, 0x04	; 4
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_LOW);
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	65 e0       	ldi	r22, 0x05	; 5
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	66 e0       	ldi	r22, 0x06	; 6
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    2922:	d7 c0       	rjmp	.+430    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 4:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_LOW);
    2924:	83 e0       	ldi	r24, 0x03	; 3
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    292e:	83 e0       	ldi	r24, 0x03	; 3
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	62 e0       	ldi	r22, 0x02	; 2
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_LOW);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	63 e0       	ldi	r22, 0x03	; 3
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	64 e0       	ldi	r22, 0x04	; 4
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	65 e0       	ldi	r22, 0x05	; 5
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	66 e0       	ldi	r22, 0x06	; 6
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    296a:	b3 c0       	rjmp	.+358    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 5:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    296c:	83 e0       	ldi	r24, 0x03	; 3
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_LOW);
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	62 e0       	ldi	r22, 0x02	; 2
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    298a:	83 e0       	ldi	r24, 0x03	; 3
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    2994:	83 e0       	ldi	r24, 0x03	; 3
    2996:	64 e0       	ldi	r22, 0x04	; 4
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    299e:	83 e0       	ldi	r24, 0x03	; 3
    29a0:	65 e0       	ldi	r22, 0x05	; 5
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	66 e0       	ldi	r22, 0x06	; 6
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    29b2:	8f c0       	rjmp	.+286    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 6:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_LOW);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	63 e0       	ldi	r22, 0x03	; 3
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_HIGH);
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	64 e0       	ldi	r22, 0x04	; 4
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    29f0:	83 e0       	ldi	r24, 0x03	; 3
    29f2:	66 e0       	ldi	r22, 0x06	; 6
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    29fa:	6b c0       	rjmp	.+214    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 7:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	62 e0       	ldi	r22, 0x02	; 2
    2a14:	41 e0       	ldi	r20, 0x01	; 1
    2a16:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_LOW);
    2a1a:	83 e0       	ldi	r24, 0x03	; 3
    2a1c:	63 e0       	ldi	r22, 0x03	; 3
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	64 e0       	ldi	r22, 0x04	; 4
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_LOW);
    2a2e:	83 e0       	ldi	r24, 0x03	; 3
    2a30:	65 e0       	ldi	r22, 0x05	; 5
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_LOW);
    2a38:	83 e0       	ldi	r24, 0x03	; 3
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    2a42:	47 c0       	rjmp	.+142    	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 8:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2a58:	83 e0       	ldi	r24, 0x03	; 3
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	63 e0       	ldi	r22, 0x03	; 3
    2a66:	41 e0       	ldi	r20, 0x01	; 1
    2a68:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_HIGH);
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	64 e0       	ldi	r22, 0x04	; 4
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    2a76:	83 e0       	ldi	r24, 0x03	; 3
    2a78:	65 e0       	ldi	r22, 0x05	; 5
    2a7a:	41 e0       	ldi	r20, 0x01	; 1
    2a7c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	66 e0       	ldi	r22, 0x06	; 6
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
    2a8a:	23 c0       	rjmp	.+70     	; 0x2ad2 <Seg_vidDispaly+0x380>
		break;
	case 9:
		DIO_vidSetPinValue(SEG_Port, SEG_PinA, DIO_HIGH);
    2a8c:	83 e0       	ldi	r24, 0x03	; 3
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinB, DIO_HIGH);
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinC, DIO_HIGH);
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	62 e0       	ldi	r22, 0x02	; 2
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinD, DIO_HIGH);
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	63 e0       	ldi	r22, 0x03	; 3
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinE, DIO_LOW);
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	64 e0       	ldi	r22, 0x04	; 4
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinF, DIO_HIGH);
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	65 e0       	ldi	r22, 0x05	; 5
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		DIO_vidSetPinValue(SEG_Port, SEG_PinG, DIO_HIGH);
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	66 e0       	ldi	r22, 0x06	; 6
    2acc:	41 e0       	ldi	r20, 0x01	; 1
    2ace:	0e 94 fa 07 	call	0xff4	; 0xff4 <DIO_vidSetPinValue>
		break;
	default:
		break;
	}
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <main>:
#include "LCD_Interface.h"
//APP
#include "ADC_Private.h"

int main()
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	a0 97       	sbiw	r28, 0x20	; 32
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61


	ADCvidinit();
    2af2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <ADCvidinit>
	LCD_vidInit();
    2af6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_vidInit>
	LCD_vidSendString("thanks Sector B5");
    2afa:	80 e6       	ldi	r24, 0x60	; 96
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_vidSendString>
	LCD_vidSetPositon(1,1);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	0e 94 3e 13 	call	0x267c	; 0x267c <LCD_vidSetPositon>
	LCD_vidSendString("and ENG.Omar...");
    2b0a:	81 e7       	ldi	r24, 0x71	; 113
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_vidSendString>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e8       	ldi	r25, 0x80	; 128
    2b16:	ab eb       	ldi	r26, 0xBB	; 187
    2b18:	b4 e4       	ldi	r27, 0x44	; 68
    2b1a:	89 8f       	std	Y+25, r24	; 0x19
    2b1c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b1e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	69 8d       	ldd	r22, Y+25	; 0x19
    2b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8d 8b       	std	Y+21, r24	; 0x15
    2b3c:	9e 8b       	std	Y+22, r25	; 0x16
    2b3e:	af 8b       	std	Y+23, r26	; 0x17
    2b40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <main+0x86>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <main+0x104>
	else if (__tmp > 65535)
    2b64:	6d 89       	ldd	r22, Y+21	; 0x15
    2b66:	7e 89       	ldd	r23, Y+22	; 0x16
    2b68:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <main+0xe6>
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9a 8b       	std	Y+18, r25	; 0x12
    2bac:	89 8b       	std	Y+17, r24	; 0x11
    2bae:	89 89       	ldd	r24, Y+17	; 0x11
    2bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <main+0xd4>
    2bb6:	9a 8b       	std	Y+18, r25	; 0x12
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9c 8b       	std	Y+20, r25	; 0x14
    2bc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <main+0xc8>
    2bcc:	14 c0       	rjmp	.+40     	; 0x2bf6 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	98 8b       	std	Y+16, r25	; 0x10
    2be8:	8f 87       	std	Y+15, r24	; 0x0f
    2bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bec:	98 89       	ldd	r25, Y+16	; 0x10
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <main+0x110>
    2bf2:	98 8b       	std	Y+16, r25	; 0x10
    2bf4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	LCD_vidInit();
    2bf6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_vidInit>
	LCD_vidSendString("Temperature : ");
    2bfa:	81 e8       	ldi	r24, 0x81	; 129
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_vidSendString>

	while(1)
	{
		LCD_vidSetPositon(0,14);
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	6e e0       	ldi	r22, 0x0E	; 14
    2c06:	0e 94 3e 13 	call	0x267c	; 0x267c <LCD_vidSetPositon>
		u16 adc = ADCu16read(0);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <ADCu16read>
    2c10:	98 a3       	std	Y+32, r25	; 0x20
    2c12:	8f 8f       	std	Y+31, r24	; 0x1f
		u16 temp = (adc*2.56)/1023*100;
    2c14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c16:	98 a1       	ldd	r25, Y+32	; 0x20
    2c18:	cc 01       	movw	r24, r24
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	2a e0       	ldi	r18, 0x0A	; 10
    2c30:	37 ed       	ldi	r19, 0xD7	; 215
    2c32:	43 e2       	ldi	r20, 0x23	; 35
    2c34:	50 e4       	ldi	r21, 0x40	; 64
    2c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 ec       	ldi	r19, 0xC0	; 192
    2c46:	4f e7       	ldi	r20, 0x7F	; 127
    2c48:	54 e4       	ldi	r21, 0x44	; 68
    2c4a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	48 ec       	ldi	r20, 0xC8	; 200
    2c5c:	52 e4       	ldi	r21, 0x42	; 66
    2c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9e 8f       	std	Y+30, r25	; 0x1e
    2c74:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_vidSendNum(temp);
    2c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c7a:	cc 01       	movw	r24, r24
    2c7c:	a0 e0       	ldi	r26, 0x00	; 0
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_vidSendNum>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a6 e9       	ldi	r26, 0x96	; 150
    2c8e:	b3 e4       	ldi	r27, 0x43	; 67
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	9c 87       	std	Y+12, r25	; 0x0c
    2c94:	ad 87       	std	Y+13, r26	; 0x0d
    2c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a ef       	ldi	r20, 0xFA	; 250
    2ca6:	54 e4       	ldi	r21, 0x44	; 68
    2ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8f 83       	std	Y+7, r24	; 0x07
    2cb2:	98 87       	std	Y+8, r25	; 0x08
    2cb4:	a9 87       	std	Y+9, r26	; 0x09
    2cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	2c f4       	brge	.+10     	; 0x2cda <main+0x1fc>
		__ticks = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	3f c0       	rjmp	.+126    	; 0x2d58 <main+0x27a>
	else if (__tmp > 65535)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	3f ef       	ldi	r19, 0xFF	; 255
    2ce6:	4f e7       	ldi	r20, 0x7F	; 127
    2ce8:	57 e4       	ldi	r21, 0x47	; 71
    2cea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cee:	18 16       	cp	r1, r24
    2cf0:	4c f5       	brge	.+82     	; 0x2d44 <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e2       	ldi	r20, 0x20	; 32
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	bc 01       	movw	r22, r24
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <main+0x25c>
    2d1c:	88 ec       	ldi	r24, 0xC8	; 200
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <main+0x24a>
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	69 f7       	brne	.-38     	; 0x2d1c <main+0x23e>
    2d42:	5f cf       	rjmp	.-322    	; 0x2c02 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	6f 81       	ldd	r22, Y+7	; 0x07
    2d46:	78 85       	ldd	r23, Y+8	; 0x08
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <main+0x286>
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	4a cf       	rjmp	.-364    	; 0x2c02 <main+0x124>

00002d6e <__udivmodsi4>:
    2d6e:	a1 e2       	ldi	r26, 0x21	; 33
    2d70:	1a 2e       	mov	r1, r26
    2d72:	aa 1b       	sub	r26, r26
    2d74:	bb 1b       	sub	r27, r27
    2d76:	fd 01       	movw	r30, r26
    2d78:	0d c0       	rjmp	.+26     	; 0x2d94 <__udivmodsi4_ep>

00002d7a <__udivmodsi4_loop>:
    2d7a:	aa 1f       	adc	r26, r26
    2d7c:	bb 1f       	adc	r27, r27
    2d7e:	ee 1f       	adc	r30, r30
    2d80:	ff 1f       	adc	r31, r31
    2d82:	a2 17       	cp	r26, r18
    2d84:	b3 07       	cpc	r27, r19
    2d86:	e4 07       	cpc	r30, r20
    2d88:	f5 07       	cpc	r31, r21
    2d8a:	20 f0       	brcs	.+8      	; 0x2d94 <__udivmodsi4_ep>
    2d8c:	a2 1b       	sub	r26, r18
    2d8e:	b3 0b       	sbc	r27, r19
    2d90:	e4 0b       	sbc	r30, r20
    2d92:	f5 0b       	sbc	r31, r21

00002d94 <__udivmodsi4_ep>:
    2d94:	66 1f       	adc	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	1a 94       	dec	r1
    2d9e:	69 f7       	brne	.-38     	; 0x2d7a <__udivmodsi4_loop>
    2da0:	60 95       	com	r22
    2da2:	70 95       	com	r23
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	9b 01       	movw	r18, r22
    2daa:	ac 01       	movw	r20, r24
    2dac:	bd 01       	movw	r22, r26
    2dae:	cf 01       	movw	r24, r30
    2db0:	08 95       	ret

00002db2 <__prologue_saves__>:
    2db2:	2f 92       	push	r2
    2db4:	3f 92       	push	r3
    2db6:	4f 92       	push	r4
    2db8:	5f 92       	push	r5
    2dba:	6f 92       	push	r6
    2dbc:	7f 92       	push	r7
    2dbe:	8f 92       	push	r8
    2dc0:	9f 92       	push	r9
    2dc2:	af 92       	push	r10
    2dc4:	bf 92       	push	r11
    2dc6:	cf 92       	push	r12
    2dc8:	df 92       	push	r13
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	ca 1b       	sub	r28, r26
    2ddc:	db 0b       	sbc	r29, r27
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	09 94       	ijmp

00002dea <__epilogue_restores__>:
    2dea:	2a 88       	ldd	r2, Y+18	; 0x12
    2dec:	39 88       	ldd	r3, Y+17	; 0x11
    2dee:	48 88       	ldd	r4, Y+16	; 0x10
    2df0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dfc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dfe:	c8 84       	ldd	r12, Y+8	; 0x08
    2e00:	df 80       	ldd	r13, Y+7	; 0x07
    2e02:	ee 80       	ldd	r14, Y+6	; 0x06
    2e04:	fd 80       	ldd	r15, Y+5	; 0x05
    2e06:	0c 81       	ldd	r16, Y+4	; 0x04
    2e08:	1b 81       	ldd	r17, Y+3	; 0x03
    2e0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e0e:	ce 0f       	add	r28, r30
    2e10:	d1 1d       	adc	r29, r1
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	ed 01       	movw	r28, r26
    2e1e:	08 95       	ret

00002e20 <_exit>:
    2e20:	f8 94       	cli

00002e22 <__stop_program>:
    2e22:	ff cf       	rjmp	.-2      	; 0x2e22 <__stop_program>
